"""
Django settings for Diginnocent project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
from decouple import config as env
import re,json,os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
PROD = env('PRODUCTION',cast=bool)
SERVER = env('SERVER',cast=bool)
DISPLAY_THEME = env('DISPLAY_THEME',cast=bool,default=False)
MEDIA_HTTPS = env('MEDIA_HTTPS',cast=bool)
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=True, cast=bool)
CORS_ALLOW_CREDENTIALS = True
# اقرأ القيمة من env
RAW_ALLOWED_HOSTS = env('ALLOWED_HOSTS', default="*")
ALLOWED_HOSTS = [host.strip() for host in RAW_ALLOWED_HOSTS.split(',')]
if ALLOWED_HOSTS != ["*"]:
    expanded_hosts = []
    for host in ALLOWED_HOSTS:
        if host in ["localhost", "127.0.0.1"]:
            expanded_hosts.append(host)
        else:
            expanded_hosts.append(host)       # host نفسه
            expanded_hosts.append(f".{host}") # subdomains
    ALLOWED_HOSTS = expanded_hosts

    # regex واحد لكل دومين عادي، بيغطي الـ subdomains تلقائيًا
    CORS_ALLOWED_ORIGIN_REGEXES = [
	    rf"^{scheme}://([a-z0-9-]+\.)*{re.escape(host.lstrip('.'))}$"
	    for host in ALLOWED_HOSTS
	    if not host.startswith('.') and host not in ["localhost", "127.0.0.1"]
	    for scheme in ["http", "https"]
    ]

    # السماح للـ localhost و 127.0.0.1 (http + https)
    CORS_ALLOWED_ORIGINS = [
	    f"{scheme}://{host}"
	    for host in ALLOWED_HOSTS
	    if host in ["localhost", "127.0.0.1"]
	    for scheme in ["http", "https"]
    ]

    # CSRF
    CSRF_TRUSTED_ORIGINS = [
        f"{scheme}://{host}" if not host.startswith('.') else f"{scheme}://*{host}"
        for host in ALLOWED_HOSTS
        for scheme in ["http", "https"]
    ]
else:
    CORS_ALLOW_ALL_ORIGINS = True  # For development only


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "website.apps.WebsiteConfig",
    'rest_framework',
'corsheaders',
'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'django_filters',
'nested_admin',

]
AUTH_USER_MODEL = 'website.CustomUser'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
'corsheaders.middleware.CorsMiddleware',

]
RATE_LIMIT = json.loads(env("RATE_LIMIT"))
REST_FRAMEWORK = {
    #'EXCEPTION_HANDLER': 'API.custom_middleware.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'website.throttles.CustomAnonRateThrottle',
        'website.throttles.CustomUserRateThrottle',

    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': f"{RATE_LIMIT['THROTTLE_RATES']}/{RATE_LIMIT['THROTTLE_RATES_UNIT']}",
        'user': f"{RATE_LIMIT['THROTTLE_RATES']}/{RATE_LIMIT['THROTTLE_RATES_UNIT']}" #minute,day,hour
    },
    'BLOCK_PERIOD': RATE_LIMIT['BLOCK_PERIOD'],
    #spectacular openapi
    'DEFAULT_SCHEMA_CLASS': 'website.CustomAutoSchema.CustomAutoSchema',
    #----------
    'DEFAULT_PAGINATION_CLASS': 'website.custom_pagination.CustomPageNumberPagination',
    # 'DEFAULT_FILTER_BACKENDS': [
    #     'django_filters.rest_framework.DjangoFilterBackend',
    #     'rest_framework.filters.SearchFilter',
    #     'rest_framework.filters.OrderingFilter',
    # ]
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=env('ACCESS_TOKEN_LIFETIME',cast=int)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=env('REFRESH_TOKEN_LIFETIME',cast=int)),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}
ROOT_URLCONF = 'Diginnocent.urls'
SQLITE = env('SQLITE',cast=bool,default=False)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Existing template directory
            BASE_DIR / 'sqlite_media' if SQLITE else 'media',  # New template directory

        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Diginnocent.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


if SQLITE:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    if PROD:
        database_cred = json.loads(env('DATABASE_PROD'))
    else:
        if SERVER:
            database_cred = json.loads(env('DATABASE_DEV_SERVER'))
        else:
            database_cred = json.loads(env('DATABASE_DEV_LOCAL'))
    DATABASES = {#for using mysql but first you have to install pip install mysqlclient or u will got error
        'default': {
            'ENGINE': database_cred['ENGINE'],
            'NAME': database_cred['NAME'],
            'USER': env('DB_USER'),#root
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': database_cred['HOST'],  # Set to 'localhost' or the IP of your database server
            'PORT': database_cred['PORT'],  # Set to '3306' for the default MySQL port,
            'OPTIONS': {
                'connect_timeout': 10,  # Retry timeout
            },
            'TEST': {
                'NAME': 'test_PulsHub_dev',
            }

        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# STATIC_ROOT = BASE_DIR / 'static'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SPECTACULAR_SETTINGS = {
    'TITLE': 'Diginnocent API',
    'DESCRIPTION': "Diginnocent API Documentation",
    'VERSION': 'v1',
    'SWAGGER_UI_SETTINGS': {
        'docExpansion': 'none',  # Ensure all tags are folded
        'defaultModelsExpandDepth': -1,  # Collapse all models
    },
    'SECURITY': [
    ],
    'TAGS': [
            #Website Endpoints
            {'name': 'A-Website Endpoints', 'description': 'Endpoints Related To Website'},
            {'name': '1-/category', 'description': 'Fetch Category/s'},
            {'name': '2-/articles', 'description': 'Fetch Article/s'},


        ],
    'SERVE_INCLUDE_SCHEMA': False,  # Whether to include the schema endpoint in the UI
    'CONTACT': {
        'name': 'Developer For Support',
        'email': 'mahmoudgshaker2018@gmail.com',
    },
}
MEDIA_ROOT = BASE_DIR / ('sqlite_media' if SQLITE else 'media')
MEDIA_URL = '/media/'   # ✅ ثابت

#Emails
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
NEWSLETTER_MESSAGE_SUBJECT = env('NEWSLETTER_MESSAGE_SUBJECT')
CONTACT_SUBMISSION_MESSAGE_SUBJECT = env('CONTACT_SUBMISSION_MESSAGE_SUBJECT')
CONTACT_SUBMISSION_MESSAGE_DEFAULT_FROM_EMAIL = env('CONTACT_SUBMISSION_MESSAGE_DEFAULT_FROM_EMAIL')
message_template_dir = os.path.join(BASE_DIR,'templates','messages')
with open(os.path.join(message_template_dir,'newsletter_template.html'),'r') as newsletter_template_file:
    NEWSLETTER_MESSAGE_TEMPLATE = newsletter_template_file.read()
with open(os.path.join(message_template_dir,'message_template.html'),'r') as message_template_file:
    MESSAGE_TEMPLATE = message_template_file.read()
#nginx
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True
#Captcha
INSTALLED_APPS += ['captcha']
RECAPTCHA_PUBLIC_KEY = env('RECAPTCHA_PUBLIC_KEY',cast=str,default='6LeJ2sYrAAAAANHsrFmvy2y9U9IBzGGt_bs5of9_')
RECAPTCHA_PRIVATE_KEY = env('RECAPTCHA_PRIVATE_KEY',cast=str,default='6LeJ2sYrAAAAAFBqHTd6ZHDX9WcVusX5vTI7vKNd')
#encrypte media urls
SIGNED_MEDIA_BASE_URL = '/secure-media'  # نفس ما هنعمله في urls.py
SIGNED_MEDIA_EXPIRES_IN = 600  # مدة صلاحية الرابط بالثواني

DEFAULT_FILE_STORAGE = 'core.storage.SignedMediaStorage'
#Jazzmin
INSTALLED_APPS = ['jazzmin'] + INSTALLED_APPS
JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "DigInnoCent s.r.o. Admin",

    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "DigInnoCent s.r.o. Admin Panel",

    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "DigInnoCent s.r.o.",

    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "dashboard/assets/logo.png",

    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo": None,

    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": None,

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-circle",

    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": None,

    # Welcome text on the login screen
    "welcome_sign": "Welcome to the DigInnoCent s.r.o. Dashboard",

    # Copyright on the footer
    "copyright": "DigInnoCent s.r.o.",
    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": False,
    ############
    # Top Menu #
    ############

    # Links to put along the top menu
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Website",  "url": "index", "new_window": True},
        {"name": "API",  "url": "swagger-ui", "new_window": True},

        # external url that opens in a new window (Permissions can be added)
        {"name": "Support", "url": "https://wa.me/420776858280", "new_window": True},

    ],
    # Add a language dropdown into the admin
    "language_chooser": True,


}
#media encoding
import secrets
import string

def generate_media_salt(length=32):
    # Define the safe characters (avoid commas, backslashes, etc.)
    characters = string.ascii_letters + string.digits + "-_"
    # Generate a random salt using the secrets module
    salt = ''.join(secrets.choice(characters) for _ in range(length))
    return salt

MEDIA_SALT  = env('MEDIA_SALT ',cast=str,default="RwzntekFD6xmPhML-h2_hT-dgEBAo_8w")