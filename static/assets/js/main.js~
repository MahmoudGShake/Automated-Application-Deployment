(function () {
  "use strict";

  /**
   * Easy selector helper function
   */
  const select = (el, all = false) => {
    el = el.trim();
    if (all) {
      return [...document.querySelectorAll(el)];
    } else {
      return document.querySelector(el);
    }
  };

  /**
   * Easy event listener function
   */
  const on = (type, el, listener, all = false) => {
    const target = select(el, all);
    if (!target) return;
    if (all) {
      target.forEach((e) => e.addEventListener(type, listener));
    } else {
      target.addEventListener(type, listener);
    }
  };

  /**
   * Easy on scroll event listener
   */
  const onscroll = (el, listener) => {
    el.addEventListener("scroll", listener);
  };

  /**
   * Navbar links active state on scroll
   */
  let navbarlinks = select("#navbar .scrollto", true) || [];
  const navbarlinksActive = () => {
    let position = window.scrollY + 200;
    navbarlinks.forEach((navbarlink) => {
      if (!navbarlink.hash) return;
      let section = select(navbarlink.hash);
      if (!section) return;
      if (
        position >= section.offsetTop &&
        position <= section.offsetTop + section.offsetHeight
      ) {
        navbarlink.classList.add("active");
      } else {
        navbarlink.classList.remove("active");
      }
    });
  };
  window.addEventListener("load", navbarlinksActive);
  onscroll(document, navbarlinksActive);

  /**
   * Scroll with offset on links with class .scrollto
   */
  const scrollto = (el) => {
    let header = select("#header");
    if (!header) return;
    let offset = header.offsetHeight;

    if (!header.classList.contains("header-scrolled")) {
      offset -= 10;
    }

    let element = select(el);
    if (!element) return;

    let elementPos = element.offsetTop;
    window.scrollTo({
      top: elementPos - offset,
      behavior: "smooth",
    });
  };

  /**
   * Toggle .header-scrolled class to #header when page is scrolled
   */
  let selectHeader = select("#header");
  if (selectHeader) {
    const headerScrolled = () => {
      if (window.scrollY > 100) {
        selectHeader.classList.add("header-scrolled");
      } else {
        selectHeader.classList.remove("header-scrolled");
      }
    };
    window.addEventListener("load", headerScrolled);
    onscroll(document, headerScrolled);
  }

  /**
   * Back to top button
   */
  let backtotop = select(".back-to-top");
  if (backtotop) {
    const toggleBacktotop = () => {
      if (window.scrollY > 100) {
        backtotop.classList.add("active");
      } else {
        backtotop.classList.remove("active");
      }
    };
    window.addEventListener("load", toggleBacktotop);
    onscroll(document, toggleBacktotop);
  }

  /**
   * Mobile nav toggle
   */
  on("click", ".mobile-nav-toggle", function () {
    const nav = select("#navbar");
    if (!nav) return;
    nav.classList.toggle("navbar-mobile");
    this.classList.toggle("bi-list");
    this.classList.toggle("bi-x");
  });

  /**
   * Mobile nav dropdowns activate
   */
  on(
    "click",
    ".navbar .dropdown > a",
    function (e) {
      const nav = select("#navbar");
      if (nav && nav.classList.contains("navbar-mobile")) {
        e.preventDefault();
        if (this.nextElementSibling) {
          this.nextElementSibling.classList.toggle("dropdown-active");
        }
      }
    },
    true
  );

  /**
   * Smooth scroll for links
   */
  on(
    "click",
    ".scrollto",
    function (e) {
      if (this.hash && select(this.hash)) {
        e.preventDefault();

        let navbar = select("#navbar");
        if (navbar && navbar.classList.contains("navbar-mobile")) {
          navbar.classList.remove("navbar-mobile");
          let navbarToggle = select(".mobile-nav-toggle");
          if (navbarToggle) {
            navbarToggle.classList.toggle("bi-list");
            navbarToggle.classList.toggle("bi-x");
          }
        }
        scrollto(this.hash);
      }
    },
    true
  );

  /**
   * Scroll with offset on page load
   */
  window.addEventListener("load", () => {
    if (window.location.hash && select(window.location.hash)) {
      scrollto(window.location.hash);
    }
  });

  /**
   * Sliders (guarded if Swiper is available)
   */
  const initSwipers = () => {
    if (typeof Swiper === "undefined") return;

    // Clients slider
    new Swiper(".clients-slider", {
      speed: 400,
      loop: true,
      autoplay: {
        delay: 5000,
        disableOnInteraction: false,
      },
      slidesPerView: "auto",
      pagination: {
        el: ".clients-slider .swiper-pagination",
        clickable: true,
      },
      breakpoints: {
        320: { slidesPerView: 2, spaceBetween: 20 },
        480: { slidesPerView: 3, spaceBetween: 30 },
        640: { slidesPerView: 4, spaceBetween: 40 },
        992: { slidesPerView: 6, spaceBetween: 50 },
      },
    });

    // Portfolio details slider
    new Swiper(".portfolio-details-slider", {
      speed: 600,
      loop: true,
      autoplay: {
        delay: 5000,
        disableOnInteraction: false,
      },
      slidesPerView: 1,
      pagination: {
        el: ".portfolio-details-slider .swiper-pagination",
        type: "bullets",
        clickable: true,
      },
      navigation: {
        nextEl: ".portfolio-details-slider .swiper-button-next",
        prevEl: ".portfolio-details-slider .swiper-button-prev",
      },
    });

    // Page (hero) slider
    new Swiper(".page-slider", {
      speed: 600,
      loop: true,
      autoplay: {
        delay: 6000,
        disableOnInteraction: false,
      },
      slidesPerView: 1,
      effect: "fade",
      pagination: {
        el: ".page-slider .swiper-pagination",
        clickable: true,
      },
    });

    // Testimonials slider
    new Swiper(".testimonials-slider", {
      speed: 600,
      loop: true,
      autoplay: {
        delay: 5000,
        disableOnInteraction: false,
      },
      slidesPerView: 1,
      pagination: {
        el: ".testimonials-slider .swiper-pagination",
        clickable: true,
      },
      breakpoints: {
        768: { slidesPerView: 2, spaceBetween: 20 },
        1200: { slidesPerView: 3, spaceBetween: 24 },
      },
    });
  };
  window.addEventListener("load", initSwipers);

  /**
   * Animation on scroll (guarded if AOS is available)
   */
  function aos_init() {
    if (typeof AOS === "undefined") return;
    AOS.init({
      duration: 1000,
      easing: "ease-in-out",
      once: true,
      mirror: false,
    });
  }
  window.addEventListener("load", aos_init);

  /**
   * Pure Counter (guarded)
   */
  if (typeof PureCounter !== "undefined") {
    new PureCounter();
  }
})();
/**
   * test console
   */
